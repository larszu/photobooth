<!DOCTYPE html>
<html lang="de">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>üì∏ Photobooth - Geteilte Fotos</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            color: white;
        }

        .container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 20px;
        }

        .header {
            text-align: center;
            margin-bottom: 30px;
        }

        .header h1 {
            font-size: 2.5em;
            margin-bottom: 10px;
            text-shadow: 2px 2px 4px rgba(0,0,0,0.3);
        }

        .header .subtitle {
            font-size: 1.2em;
            opacity: 0.9;
            margin-bottom: 20px;
        }

        .photo-count {
            background: rgba(255, 255, 255, 0.2);
            padding: 10px 20px;
            border-radius: 25px;
            display: inline-block;
            backdrop-filter: blur(10px);
            border: 1px solid rgba(255, 255, 255, 0.3);
        }

        .gallery {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(280px, 1fr));
            gap: 20px;
            margin-bottom: 30px;
        }

        .photo-card {
            background: rgba(255, 255, 255, 0.1);
            border-radius: 20px;
            overflow: hidden;
            backdrop-filter: blur(10px);
            border: 1px solid rgba(255, 255, 255, 0.2);
            transition: all 0.3s ease;
            position: relative;
        }

        .photo-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 10px 30px rgba(0,0,0,0.3);
        }

        .photo-card img {
            width: 100%;
            height: 250px;
            object-fit: cover;
            display: block;
        }

        .photo-info {
            padding: 15px;
        }

        .photo-filename {
            font-weight: 600;
            margin-bottom: 8px;
            font-size: 0.9em;
        }

        .photo-actions {
            display: flex;
            gap: 10px;
            margin-top: 10px;
        }

        .btn {
            padding: 8px 16px;
            border: none;
            border-radius: 10px;
            font-weight: 600;
            cursor: pointer;
            text-decoration: none;
            display: inline-flex;
            align-items: center;
            gap: 5px;
            transition: all 0.2s ease;
            font-size: 0.85em;
        }

        .btn-primary {
            background: rgba(76, 175, 80, 0.9);
            color: white;
        }

        .btn-primary:hover {
            background: rgba(76, 175, 80, 1);
            transform: scale(1.05);
        }

        .btn-secondary {
            background: rgba(255, 255, 255, 0.2);
            color: white;
            border: 1px solid rgba(255, 255, 255, 0.3);
        }

        .btn-secondary:hover {
            background: rgba(255, 255, 255, 0.3);
        }

        .download-all {
            text-align: center;
            margin: 30px 0;
        }

        .download-all .btn {
            font-size: 1.1em;
            padding: 12px 30px;
            background: rgba(76, 175, 80, 0.9);
            color: white;
        }

        .footer {
            text-align: center;
            margin-top: 40px;
            opacity: 0.8;
            font-size: 0.9em;
        }

        .loading {
            text-align: center;
            padding: 50px;
        }

        .error {
            background: rgba(244, 67, 54, 0.2);
            border: 1px solid rgba(244, 67, 54, 0.5);
            padding: 20px;
            border-radius: 15px;
            margin: 20px 0;
            text-align: center;
        }

        /* Mobile optimizations */
        @media (max-width: 768px) {
            .container {
                padding: 15px;
            }
            
            .header h1 {
                font-size: 2em;
            }
            
            .gallery {
                grid-template-columns: repeat(auto-fill, minmax(240px, 1fr));
                gap: 15px;
            }
            
            .photo-card img {
                height: 200px;
            }
        }

        @media (max-width: 480px) {
            .gallery {
                grid-template-columns: 1fr;
            }
            
            .photo-actions {
                flex-direction: column;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>üì∏ Photobooth</h1>
            <div class="subtitle">Geteilte Fotos</div>
            <div class="photo-count" id="photoCount">
                L√§dt Fotos...
            </div>
        </div>

        <div id="loadingMessage" class="loading">
            <h3>üîÑ Fotos werden geladen...</h3>
            <p>Bitte einen Moment Geduld</p>
        </div>

        <div id="errorMessage" class="error" style="display: none;">
            <h3>‚ùå Fehler beim Laden</h3>
            <p id="errorText"></p>
        </div>

        <div class="download-all" id="downloadAllSection" style="display: none;">
            <button class="btn" onclick="downloadAllPhotos()">
                üì¶ Alle Fotos herunterladen
            </button>
        </div>

        <div id="gallery" class="gallery"></div>

        <div class="footer">
            <p>üöÄ Powered by Photobooth Smart Share V2</p>
            <p>Fotos direkt auf dein Ger√§t herunterladen</p>
        </div>
    </div>

    <script>
        // Parse URL parameters
        const urlParams = new URLSearchParams(window.location.search);
        const photosParam = urlParams.get('photos');
        
        let photoList = [];

        async function loadPhotos() {
            try {
                if (!photosParam) {
                    throw new Error('Keine Fotos angegeben in der URL');
                }

                // Parse photo IDs from URL parameter
                photoList = photosParam.split(',').map(id => decodeURIComponent(id.trim()));
                
                document.getElementById('photoCount').textContent = `${photoList.length} ${photoList.length === 1 ? 'Foto' : 'Fotos'} geteilt`;
                document.getElementById('loadingMessage').style.display = 'none';
                document.getElementById('downloadAllSection').style.display = 'block';

                // Create gallery
                const gallery = document.getElementById('gallery');
                gallery.innerHTML = '';

                for (const photoId of photoList) {
                    await createPhotoCard(photoId, gallery);
                }

            } catch (error) {
                console.error('Error loading photos:', error);
                document.getElementById('loadingMessage').style.display = 'none';
                document.getElementById('errorMessage').style.display = 'block';
                document.getElementById('errorText').textContent = error.message;
            }
        }

        async function createPhotoCard(photoId, gallery) {
            try {
                // Extract folder and filename from photoId
                const parts = photoId.split('/');
                const filename = parts[parts.length - 1];
                const folder = parts.length > 1 ? parts[0] : '';

                // Create photo card
                const card = document.createElement('div');
                card.className = 'photo-card';
                
                const photoUrl = `/api/photos/${encodeURIComponent(folder)}/${encodeURIComponent(filename)}`;
                const downloadUrl = `/api/photo/download/${encodeURIComponent(photoId)}`;
                
                card.innerHTML = `
                    <img src="${photoUrl}" alt="${filename}" loading="lazy" 
                         onerror="this.src='/api/photos/thumbnail-error.jpg'">
                    <div class="photo-info">
                        <div class="photo-filename">${filename}</div>
                        <div class="photo-actions">
                            <a href="${downloadUrl}" class="btn btn-primary" download>
                                üíæ Herunterladen
                            </a>
                            <button class="btn btn-secondary" onclick="sharePhoto('${photoId}')">
                                üì§ Teilen
                            </button>
                        </div>
                    </div>
                `;

                gallery.appendChild(card);
            } catch (error) {
                console.error('Error creating photo card for:', photoId, error);
            }
        }

        function sharePhoto(photoId) {
            const photoUrl = `${window.location.origin}/api/photos/${encodeURIComponent(photoId)}`;
            
            if (navigator.share) {
                navigator.share({
                    title: 'Photobooth Foto',
                    text: 'Schau dir dieses Foto an!',
                    url: photoUrl
                }).catch(console.error);
            } else {
                // Fallback: Copy to clipboard
                navigator.clipboard.writeText(photoUrl).then(() => {
                    alert('üìã Link wurde in die Zwischenablage kopiert!');
                }).catch(console.error);
            }
        }

        function downloadAllPhotos() {
            // Download each photo individually (browsers don't support bulk downloads)
            photoList.forEach((photoId, index) => {
                setTimeout(() => {
                    const downloadUrl = `/api/photo/download/${encodeURIComponent(photoId)}`;
                    const link = document.createElement('a');
                    link.href = downloadUrl;
                    link.download = '';
                    document.body.appendChild(link);
                    link.click();
                    document.body.removeChild(link);
                }, index * 500); // Stagger downloads to avoid browser limits
            });
        }

        // Load photos when page loads
        document.addEventListener('DOMContentLoaded', loadPhotos);
    </script>
</body>
</html>
